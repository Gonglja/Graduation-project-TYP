C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN demo.OBJ
COMPILER INVOKED BY: D:\1\Keil\C51\BIN\C51.EXE demo.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <intrins.h>
   2          #include <reg52.h>
   3          #define uchar unsigned char
   4          #define uint unsigned int
   5          
   6          //定义使能位
   7          sbit Slave1En = P1^3;
   8          sbit Slave2En = P1^4;
   9          
  10          //sbit SpeakEn1 = P1^5;
  11          //sbit SpeakEn2 = P1^6;
  12          //sbit SpeakEn3 = P1^7;
  13          sbit LCD_RS=P1^2;//定义引脚
  14          sbit LCD_RW=P1^1;
  15          sbit LCD_E=P1^0;
  16          //sbit PSB =P3^6;               //PSB脚为12864-12系列的串、并通讯功能切换，我们使用8位并行接口，PSB=1
  17          #define LCD_Data P2
  18          
  19          
  20          
  21          #define Busy    0x80 //用于检测LCD状态字中的Busy标识
  22          void WriteDataLCD(unsigned char WDLCD);
  23          void WriteCommandLCD(unsigned char WCLCD,BuysC);
  24          unsigned char ReadDataLCD(void);
  25          unsigned char ReadStatusLCD(void);
  26          void LCDInit(void);
  27          void LCDClear(void);
  28          void LCDFlash(void);
  29          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData);
  30          void DisplayListChar(unsigned char X, unsigned char Y, unsigned char code *DData);
  31          //void DisplayImage (unsigned char code *DData);
  32          void Delay5Ms(void);
  33          void Delay400Ms(void);
  34          
  35          /////////////////////////串口部分///////////////
  36          uchar Uart_flag=0,recData=0;
  37          
  38          void UartInit(void);
  39          void Txd_Data(char Data);
  40          void PutString(unsigned char *TXStr); 
  41          //------------------串口通信协议-----------------//
  42          /*
  43            客户端数据包格式解释(长度恒为8):
  44            例如:A1_T225#           设备1的温度是22.5
  45            A               -----数据包的开始标记(可以为A到Z,意味着数据包可以有26种)
  46            1                   -----设备代号
  47            T225        --------指令(长度恒为4)，指令的前1个人字符是指令头部，指令的后3个字符是指令尾部
  48            #           ---------数据包的结束标记
  49          
  50            服务器端数据包格式解释(长度恒为15):
  51            例如:A2_SenT010250#
  52            A--------数据包的开始标记(可以为A到Z,意味着数据包可以有26种)
  53            02-----设备代号
  54            SenT010250--------指令(长度恒为10)，指令的前4个人字符是指令头部，指令的后6个字符是指令尾部
  55            #---------数据包的结束标记
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 2   

  56          */
  57          #define DataPacketLength 13
  58          uchar buf_string[DataPacketLength];  //定义数据包长度为8个字符
  59          #define deviceID '0'        //用于串口通信时，定义本地设备ID的第1位
  60          #define datapackage_headflag 'A' //用于串口通信时，定义数据包头部的验证标记
  61          
  62          uchar DataPackage[DataPacketLength]={datapackage_headflag,deviceID,'_','T','X','X','X','H','X','X','S','X'
             -,'#'};
  63          
  64          uchar slave1_temp_disp[4]={'T','X','X','X'};
  65          uchar slave2_temp_disp[4]={'T','X','X','X'};
  66          uchar slave1_hum_disp[3]={'H','X','X'};
  67          uchar slave2_hum_disp[3]={'H','X','X'};
  68          uchar slave1_s_disp[2]={'S','X'};
  69          uchar slave2_s_disp[2]={'S','X'};
  70          
  71          //uchar code disp1[]={"位置01的监控如下"};
  72          //uchar code disp2[]={"位置02的监控如下"};
  73          
  74          /////////////////////////////////////////////////////////////////////////////////////////////
  75          
  76          void main(void)
  77          {
  78   1              //Delay400Ms(); //启动等待，等LCD讲入工作状态
  79   1              LCDInit(); //LCM初始化
  80   1              Delay5Ms(); //延时片刻(可不要)
  81   1              UartInit();
  82   1              Slave1En=1;
  83   1              Slave2En=0;
  84   1      
  85   1              while(1)
  86   1              {
  87   2      
  88   2                      WriteCommandLCD(0x80);     //80 90 88 98
*** WARNING C209 IN LINE 88 OF DEMO.C: '_WriteCommandLCD': too few actual parameters
  89   2                      WriteDataLCD(0x31);
  90   2                      WriteCommandLCD(0x90);     //80 90 88 98
*** WARNING C209 IN LINE 90 OF DEMO.C: '_WriteCommandLCD': too few actual parameters
  91   2                      WriteDataLCD(slave1_temp_disp[0]);
  92   2                      WriteDataLCD(':');
  93   2                      WriteDataLCD(slave1_temp_disp[1]);
  94   2                      WriteDataLCD(slave1_temp_disp[2]);
  95   2                      WriteDataLCD('.');
  96   2                      WriteDataLCD(slave1_temp_disp[3]);
  97   2      
  98   2      
  99   2                      WriteDataLCD(' ');
 100   2                      WriteDataLCD(slave1_hum_disp[0]);
 101   2                      WriteDataLCD(':');
 102   2                      WriteDataLCD(slave1_hum_disp[1]);
 103   2                      WriteDataLCD(slave1_hum_disp[2]);
 104   2                      WriteDataLCD(' ');
 105   2                      WriteDataLCD(slave1_s_disp[0]);
 106   2                      WriteDataLCD(':');
 107   2                      WriteDataLCD(slave1_s_disp[1]);
 108   2      
 109   2                      
 110   2                      //DisplayListChar(0,3,disp2);
 111   2                      WriteCommandLCD(0x88);     //80 90 88 98
*** WARNING C209 IN LINE 111 OF DEMO.C: '_WriteCommandLCD': too few actual parameters
 112   2                      WriteDataLCD(0x32);
 113   2                      WriteCommandLCD(0x98);     //80 90 88 98
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 3   

*** WARNING C209 IN LINE 113 OF DEMO.C: '_WriteCommandLCD': too few actual parameters
 114   2                      WriteDataLCD(slave2_temp_disp[0]);
 115   2                      WriteDataLCD(':');
 116   2                      WriteDataLCD(slave2_temp_disp[1]);
 117   2                      WriteDataLCD(slave2_temp_disp[2]);
 118   2                      WriteDataLCD('.');
 119   2                      WriteDataLCD(slave2_temp_disp[3]);
 120   2                      WriteDataLCD(' ');
 121   2                      WriteDataLCD(slave2_hum_disp[0]);
 122   2                      WriteDataLCD(':');
 123   2                      WriteDataLCD(slave2_hum_disp[1]);
 124   2                      WriteDataLCD(slave2_hum_disp[2]);
 125   2                      WriteDataLCD(' ');
 126   2                      WriteDataLCD(slave2_s_disp[0]);
 127   2                      WriteDataLCD(':');
 128   2                      WriteDataLCD(slave2_s_disp[1]);
 129   2      
 130   2              }
 131   1      }
 132          
 133          //写数据
 134          void WriteDataLCD(unsigned char WDLCD)
 135          {
 136   1              ReadStatusLCD(); //检测忙 
 137   1              LCD_RS = 1;
 138   1              LCD_RW = 0;
 139   1              LCD_Data = WDLCD;
 140   1              LCD_E = 1;
 141   1              LCD_E = 1;
 142   1              LCD_E = 1;
 143   1              LCD_E = 0;
 144   1      }
 145          
 146          //写指令
 147          void WriteCommandLCD(unsigned char WCLCD,BuysC) //BuysC为0时忽略忙检测
 148          {
 149   1              if (BuysC) ReadStatusLCD(); //根据需要检测忙 
 150   1              LCD_RS = 0;
 151   1              LCD_RW = 0; 
 152   1              LCD_Data = WCLCD;
 153   1              LCD_E = 1; 
 154   1              LCD_E = 1;
 155   1              LCD_E = 1;
 156   1              LCD_E = 0;  
 157   1      }
 158          
 159          //读数据
 160          unsigned char ReadDataLCD(void)
 161          {
 162   1              LCD_RS = 1; 
 163   1              LCD_RW = 1;
 164   1              LCD_E = 0;
 165   1              LCD_E = 0;
 166   1              LCD_E = 1;
 167   1              return(LCD_Data);
 168   1      }
 169          
 170          //读状态
 171          unsigned char ReadStatusLCD(void)
 172          {
 173   1              LCD_Data = 0xFF; 
 174   1              LCD_RS = 0;
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 4   

 175   1              LCD_RW = 1; 
 176   1              LCD_E = 1;
 177   1              while (LCD_Data & Busy); //检测忙信号
 178   1              LCD_E = 0;
 179   1              return(LCD_Data);
 180   1      }
 181          
 182          void LCDInit(void) //LCM初始化
 183          {
 184   1              WriteCommandLCD(0x30,1); //显示模式设置,开始要求每次检测忙信号
 185   1              WriteCommandLCD(0x01,1); //显示清屏
 186   1              WriteCommandLCD(0x06,1); // 显示光标移动设置
 187   1              WriteCommandLCD(0x0C,1); // 显示开及光标设置
 188   1      }
 189          void LCDClear(void) //清屏
 190          {
 191   1              WriteCommandLCD(0x01,1); //显示清屏
 192   1              WriteCommandLCD(0x34,1); // 显示光标移动设置
 193   1              WriteCommandLCD(0x30,1); // 显示开及光标设置
 194   1      }
 195          void LCDFlash(void)     //闪烁效果
 196          {
 197   1              WriteCommandLCD(0x08,1); //显示清屏
 198   1              Delay400Ms();
 199   1              WriteCommandLCD(0x0c,1); // 显示开及光标设置
 200   1              Delay400Ms();
 201   1              WriteCommandLCD(0x08,1); //显示清屏
 202   1              Delay400Ms();
 203   1              WriteCommandLCD(0x0c,1); // 显示开及光标设置
 204   1              Delay400Ms();
 205   1              WriteCommandLCD(0x08,1); //显示清屏
 206   1              Delay400Ms();
 207   1      }
 208          //按指定位置显示一个字符
 209          void DisplayOneChar(unsigned char X, unsigned char Y, unsigned char DData)
 210          {
 211   1              if(Y<1)
 212   1                Y=1;
 213   1              if(Y>4)
 214   1                Y=4;
 215   1                X &= 0x0F; //限制X不能大于16，Y不能大于1
 216   1              switch(Y){
 217   2              case 1:X|=0X80;break;
 218   2              case 2:X|=0X90;break;
 219   2              case 3:X|=0X88;break;
 220   2              case 4:X|=0X98;break;
 221   2              }
 222   1              WriteCommandLCD(X, 0); //这里不检测忙信号，发送地址码
 223   1              WriteDataLCD(DData);
 224   1      }
 225          
 226          //按指定位置显示一串字符
 227          void DisplayListChar(unsigned char X, unsigned char Y, unsigned char code *DData)
 228          {
 229   1          unsigned char ListLength,X2;
 230   1          ListLength = 0;
 231   1          X2=X;
 232   1          if(Y<1)
 233   1                 Y=1;
 234   1          if(Y>4)
 235   1                 Y=4;
 236   1          X &= 0x0F; //限制X不能大于16，Y在1-4之内
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 5   

 237   1          switch(Y){
 238   2                      case 1:X2|=0X80;break;  //根据行数来选择相应地址
 239   2                      case 2:X2|=0X90;break;
 240   2                      case 3:X2|=0X88;break;
 241   2                      case 4:X2|=0X98;break;
 242   2              }
 243   1        WriteCommandLCD(X2, 1); //发送地址码
 244   1        while (DData[ListLength]>=0x20) //若到达字串尾则退出
 245   1        {
 246   2           if (X <= 0x0F) //X坐标应小于0xF
 247   2           {
 248   3                      WriteDataLCD(DData[ListLength]); //
 249   3                      ListLength++;
 250   3                      X++;
 251   3                      Delay5Ms();
 252   3          }
 253   2        }
 254   1      }
 255          
 256          //图形显示122*32
 257          //void DisplayImage (unsigned char code *DData){
 258          //      unsigned char x,y,i;
 259          //      unsigned int tmp=0;
 260          //      for(i=0;i<9;){          //分两屏，上半屏和下半屏，因为起始地址不同，需要分开
 261          //      for(x=0;x<32;x++){                              //32行
 262          //              WriteCommandLCD(0x34,1);
 263          //              WriteCommandLCD((0x80+x),1);//列地址
 264          //              WriteCommandLCD((0x80+i),1);    //行地址，下半屏，即第三行地址0X88
 265          //              WriteCommandLCD(0x30,1);                
 266          //              for(y=0;y<16;y++)       
 267          //                      WriteDataLCD(DData[tmp+y]);//读取数据写入LCD
 268          //              tmp+=16;                
 269          //      }
 270          //      i+=8;
 271          //      }
 272          //      WriteCommandLCD(0x36,1);        //扩充功能设定
 273          //      WriteCommandLCD(0x30,1);
 274          //}
 275          
 276          //5ms延时
 277          void Delay5Ms(void)
 278          {
 279   1       unsigned int TempCyc = 5552;
 280   1       while(TempCyc--);
 281   1      }
 282          
 283          //400ms延时
 284          void Delay400Ms(void)
 285          {
 286   1       unsigned char TempCycA = 5;
 287   1       unsigned int TempCycB;
 288   1       while(TempCycA--)
 289   1       {
 290   2        TempCycB=7269;
 291   2        while(TempCycB--);
 292   2       };
 293   1      }
 294          
 295          void UartInit()
 296          {
 297   1              SCON=0x50;   //串口方式1，使能接收
 298   1              TMOD=0x20;  //定时器1工作方式2（8位自动重装初值）
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 6   

 299   1              
 300   1              TH1=0xfd;    //计数器初始值设置 9600bps
 301   1              TL1=0xfa;  
 302   1              //PCON|=0x80;  //定义PCON寄存器中的SMOD=1,波特率加倍
 303   1              SM0=0;
 304   1              SM1=1;
 305   1      
 306   1              TR1=1;
 307   1              TI=0;
 308   1              RI=0;
 309   1              //PS=1;   //提高串口中断优先级
 310   1              ES=1;  //开启串口中断使能
 311   1              EA=1;
 312   1      //    SCON=0x50; //串口工作方式1，8位UART，波特率可变  
 313   1      //      TH2=0xFF;           
 314   1      //      TL2=0xFD;    //波特率:115200 晶振=11.0592MHz 
 315   1      //      RCAP2H=0xFF;   
 316   1      //      RCAP2L=0xFD; //16位自动再装入值
 317   1      //      
 318   1      //      TCLK=1;   
 319   1      //      RCLK=1;   
 320   1      //      C_T2=0;   
 321   1      //      EXEN2=0; //波特率发生器工作方式
 322   1      //
 323   1      //    TR2=1 ; //定时器2开始            //
 324   1      //    TI = 1;
 325   1      //
 326   1      //    REN=1;       //使能串口允许接收
 327   1      //    SM0=0;      //工作在串口的工作方式1
 328   1      //    SM1=1;
 329   1      //    ES=1;       //串口中断关闭，待初始化后再打开
 330   1      //    EA=1;       //总中断打开  
 331   1      }
 332          //
 333          //void Txd_Data(char Data)    //串口发送数据
 334          //{
 335          //      SBUF = Data;
 336          //      while(!TI);
 337          //      TI=0;
 338          //}
 339          
 340          //串口发送函数
 341          //void PutString(unsigned char *TXStr)  
 342          //{                
 343          //    ES=0;     
 344          //    while(*TXStr!=0) 
 345          //    {                      
 346          //        SBUF=*TXStr;
 347          //        while(TI==0);
 348          //        TI=0;    
 349          //        TXStr++;
 350          //    }
 351          //    ES=1; 
 352          //}                                                     
 353          //串口接收函数
 354          bit ReceiveString()    
 355          {
 356   1          char * RecStr=buf_string;
 357   1          char num=0;
 358   1          unsigned char count=0;
 359   1          loop:    
 360   1                  *RecStr=SBUF;
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 7   

 361   1                  count=0;
 362   1                  RI=0;    
 363   1                  if(num < DataPacketLength -1)  //数据包长度为8个字符,尝试连续接收8个字符
 364   1                  {
 365   2                      num++;
 366   2                      RecStr++;    
 367   2                      while(!RI);
 368   2                      {
 369   3                         count++;
 370   3                         if(count>130)return 0;    //接收数据等待延迟，等待时间太久会导致CPU运算闲置，太短会出现"数据包
             -被分割",默认count=130
 371   3                      }
 372   2                      goto loop;
 373   2                  }
 374   1          return 1;
 375   1      }
 376          ////比较指令头部
 377          //bit CompareCMD_head(char CMD_head[])    
 378          //{
 379          //     unsigned char CharNum;
 380          //     for(CharNum=0;CharNum<1;CharNum++)  //指令长度为8个字符
 381          //     {
 382          //         if(!(buf_string[CharNum+3]==CMD_head[CharNum]))
 383          //         {
 384          //             return 0;  //指令头部匹配失败
 385          //         }
 386          //     }
 387          //     return 1;        //指令头部匹配成功
 388          //}
 389          ////比较指令尾部(start:从哪里开始比较，quality:比较多少个字符，CMD_tail[]：要比较的字符串)
 390          //bit CompareCMD_tail(unsigned char start,unsigned char quality,char CMD_tail[]) 
 391          //{
 392          //     unsigned char CharNum;
 393          //     for(CharNum=0;CharNum<quality;CharNum++)
 394          //     {
 395          //         if(!(buf_string[start+CharNum]==CMD_tail[CharNum]))
 396          //         {
 397          //             return 0; 
 398          //         }
 399          //     }
 400          //     return 1;
 401          // }
 402          
 403          bit Deal_UART_RecData()   //处理串口接收数据包函数（成功处理数据包则返回1，否则返回0）
 404           {
 405   1           //PutString(buf_string);
 406   1           if(buf_string[0]==datapackage_headflag&&buf_string[DataPacketLength -1]=='#')  //进行数据包头尾标记验
             -证
 407   1           {        
 408   2               switch(buf_string[1])        //识别发送者设备ID的第1位数字
 409   2               {
 410   3                   case '1':
 411   3                                      {
 412   4                       switch(buf_string[2])        //识别发送者设备ID的第2位数字
 413   4                       {
 414   5                           case '_':
 415   5                               if(buf_string[3]=='T')    //判断指令头部是否为'T'
 416   5                               {
 417   6                                       //temp =  buf_string[4]*100+buf_string[5]*10+buf_string[6]; 
 418   6                                      slave1_temp_disp[1]=buf_string[4];
 419   6                                                              slave1_temp_disp[2]=buf_string[5];
 420   6                                                              slave1_temp_disp[3]=buf_string[6];
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 8   

 421   6                                                       }
 422   5                               if(buf_string[7]=='H')  
 423   5                               {
 424   6                                   slave1_hum_disp[1]= buf_string[8]; 
 425   6                                                               slave1_hum_disp[2]= buf_string[9];           
 426   6                                   
 427   6                               }
 428   5                               if(buf_string[10]=='S')  
 429   5                               {
 430   6                                   slave1_s_disp[1]= buf_string[11]; 
 431   6                                   
 432   6                               }
 433   5                                                       Slave1En=0;
 434   5                                               Slave2En=1;
 435   5                               return 0;
 436   5                           default:
 437   5                               return 0;
 438   5                       }
 439   4                                       
 440   4                                       }
 441   3                               case '2':
 442   3                               {
 443   4                       switch(buf_string[2])        //识别发送者设备ID的第2位数字
 444   4                       {
 445   5                           case '_':
 446   5                               if(buf_string[3]=='T')    //判断指令头部是否为'T'
 447   5                               {
 448   6                                      slave2_temp_disp[1]=buf_string[4];
 449   6                                                              slave2_temp_disp[2]=buf_string[5];
 450   6                                                              slave2_temp_disp[3]=buf_string[6];
 451   6                                                       }
 452   5                               if(buf_string[7]=='H')  
 453   5                               {
 454   6                                   slave2_hum_disp[1]= buf_string[8]; 
 455   6                                                               slave2_hum_disp[2]= buf_string[9];             
 456   6                                   
 457   6                               }
 458   5                               if(buf_string[10]=='S')  
 459   5                               {
 460   6                                  slave2_s_disp[1]= buf_string[11];  
 461   6                               }
 462   5                                                       Slave1En=1;
 463   5                                               Slave2En=0;
 464   5                               return 0;
 465   5                           
 466   5                           default:
 467   5                               return 0;
 468   5                       }
 469   4                                        
 470   4                              }         
 471   3                   default:
 472   3                       return 0;
 473   3               }
 474   2           }
 475   1           return 0;
 476   1       }
 477          void ser() interrupt 4          //串口中断
 478          {
 479   1              if(ReceiveString())    
 480   1          {
 481   2              //数据包长度正确则执行以下代码
 482   2              Deal_UART_RecData();   
C51 COMPILER V9.00   DEMO                                                                  05/24/2019 12:04:22 PAGE 9   

 483   2          }
 484   1          else
 485   1          {
 486   2              //数据包长度错误则执行以下代码
 487   2              //LED1=~LED1;                
 488   2          }
 489   1          RI=0;  //接收并处理一次数据后把接收中断标志清除一下，拒绝响应在中断接收忙的时候发来的请求
 490   1      }
 491          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    839    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     46       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
